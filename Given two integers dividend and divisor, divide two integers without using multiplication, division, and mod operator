int discard(int a, int b);
int findKAndInitialDivisor(int dividend, int divisor, int* k);

int divide(int dividend, int divisor){
    int k;
    long long q = 0;
    int shouldInvertResult = !((dividend < 0) == (divisor < 0));
    divisor = findKAndInitialDivisor(dividend, divisor, &k);
    while (k > 0){
        q <<= 1;
        int prevDiscardDividend = dividend;
        dividend = discard(dividend, divisor);
        if (dividend == 0 || prevDiscardDividend < 0 == dividend < 0)
            q++;
        else
            dividend = prevDiscardDividend;
        divisor >>= 1;
        k--;
    }
    
    if (shouldInvertResult)
        q = (q^-1)+1;
    else if (q > INT_MAX)
        return INT_MAX;
    return q;
}

int discard(int a, int b){
    if ((a < 0) == (b < 0))
         return a - b;
    else
        return a + b;
}

int findKAndInitialDivisor(int dividend, int divisor, int* k){
    int dividend_sign = dividend < 0;
    int divisor_sign = divisor < 0;
    (*k)++;
    int tmpDiscard;
    int tmpShiftedDivisor;
    while ((tmpDiscard=discard(dividend, (tmpShiftedDivisor=(unsigned int)divisor << 1))) < 0 == dividend_sign && 
          (tmpShiftedDivisor < 0) == divisor_sign){
        // printf(">%08x, d=%08x\n", discard(dividend, (unsigned int)divisor << 1), divisor);
        (*k)++;
        divisor = (unsigned int)divisor << 1;
        // printf("<%08x, d=%08x\n", discard(dividend, (unsigned int)divisor << 1), divisor);
    }
    if (tmpDiscard == 0){
        // printf("additional shift\n");
        (*k)++;
        divisor = (unsigned int)divisor << 1;
    }
    // printf("f>%08x=%d, %08x=%d, %d\n", dividend, dividend, divisor, divisor, *k);
    return divisor;
}
